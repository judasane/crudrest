{"ts":1359327401524,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":true,"ts":1359327398579,"patch":[[{"diffs":[[1,"Base = declarative_base()\r\nclass Usuario(Base):\r\n    \"Inicializa el objeto Usuario con los datos pertinentes\"\r\n    \r\n    __tablename__ = 'users'\r\n\r\n    id = Column(Integer, primary_key=True)\r\n    nombre = Column(String(50))\r\n    apellido = Column(String(50))\r\n    username = Column(String(50))\r\n    email = Column(String(150))\r\n    password = Column(String(32))\r\n\r\n    def __init__(self, nombre, apellido, username, email, password):\r\n                \r\n        self.nombre = nombre\r\n        self.apellido = apellido\r\n        self.username = username\r\n        self.email = email\r\n        self.password = password\r\n    def toDict(self):\r\n        dic = {}\r\n        dic[\"id\"] = self.id\r\n        dic[\"nombre\"] = self.nombre\r\n        dic[\"apellido\"] = self.apellido\r\n        dic[\"username\"] = self.username\r\n        dic[\"email\"] = self.email\r\n        dic[\"password\"] = self.password\r\n        return dic\r\n    #  def __repr__(self):\r\n    #\treturn \"ID: %s\\nNombre: %s \\nApellido: %s\\n Username: %s\\nPassword: %s\\nEmail: %s\\n\\n\" % (self.id,self.nombre,self.apellido,self.username,self.password,self.email)\r\n\r\n    def update(self, diccionario):\r\n        \"\"\"\r\n        Actualiza el usuario a partir de un diccionario de registros de la forma\r\n        atributo:valor\r\n        \"\"\"\r\n        for propiedad, valor in diccionario.iteritems():\r\n            if propiedad == \"nombre\":\r\n                self.nombre = valor\r\n            elif propiedad == \"apellido\":\r\n                self.apellido = valor\r\n            elif propiedad == \"username\":\r\n                self.username = valor\r\n            elif propiedad == \"email\":\r\n                self.email = valor\r\n            elif propiedad == \"password\":\r\n                self.password = valor\r\n        return \"exito\"\r\n\r\nclass Role(Base):\r\n    __tablename__ = 'roles'\r\n\r\n    id = Column(Integer, primary_key=True)\r\n    nombre = Column(String(50))\r\n    descripcion = Column(String)\r\n\r\n    def __init__(self, nombre, descripcion):\r\n        self.nombre = nombre\r\n        self.descripcion = descripcion\r\n\r\n    def toDict(self):\r\n        dic = {}\r\n        dic[\"id\"] = self.id\r\n        dic[\"nombre\"] = self.nombre\r\n        dic[\"descripcion\"] = self.descripcion\r\n        return dic\r\n        \r\nclass Permission(Base):\r\n    __tablename__ = 'Permissions'\r\n\r\n    id = Column(Integer, primary_key=True)\r\n    nombre = Column(String(50))\r\n    descripcion = Column(String)\r\n\r\n    def __init__(self, nombre, descripcion):\r\n        self.nombre = nombre\r\n        self.descripcion = descripcion\r\n\r\n    def toDict(self):\r\n        dic = {}\r\n        dic[\"id\"] = self.id\r\n        dic[\"nombre\"] = self.nombre\r\n        dic[\"descripcion\"] = self.descripcion\r\n        return dic\r\n        \r\nclass RolesPermissions(Base):\r\n    __tablename__ = \"roles_permissions\"\r\n    id_role = Column(Integer, primary_key=True)\r\n    id_permission = Column(Integer)\r\n    \r\n    def __init__(self, id_role, id_permission):\r\n        self.id_role = id_role\r\n        self.id_permission = id_permission\r\n        \r\nclass UsersRoles(Base):\r\n    __tablename__ = \"users_roles\"\r\n    id_user = Column(Integer, primary_key=True)\r\n    id_role = Column(Integer)\r\n    \r\n    def __init__(self, id_user, id_role):\r\n        self.id_user = id_user\r\n        self.id_role = id_role"]],"start1":0,"start2":0,"length1":0,"length2":3241}]],"length":3241,"saved":false}
{"ts":1359327416256,"patch":[[{"diffs":[[1,"\r\n\r\n"],[0,"Base = decla"]],"start1":0,"start2":0,"length1":12,"length2":16}]],"length":3245,"saved":false}
{"ts":1359327426236,"patch":[[{"diffs":[[1,"from sqlalchemy.ext.declarative import declarative_base"],[0,"\r\n\r\nBase = d"]],"start1":0,"start2":0,"length1":12,"length2":67}]],"length":3300,"saved":false}
{"ts":1359327436727,"patch":[[{"diffs":[[1,"# -*- coding: utf-8 -*-\r\n"],[0,"from sql"]],"start1":0,"start2":0,"length1":8,"length2":33}]],"length":3325,"saved":false}
{"ts":1359327484846,"patch":[[{"diffs":[[0,"base\r\n\r\n"],[1,"\r\n"],[0,"Base = d"]],"start1":76,"start2":76,"length1":16,"length2":18}]],"length":3327,"saved":false}
{"ts":1359327486213,"patch":[[{"diffs":[[0,"e_base\r\n"],[1,"from sqlalchemy import Column\r\nfrom sqlalchemy import Integer\r\nfrom sqlalchemy import String"],[0,"\r\n\r\nBase"]],"start1":74,"start2":74,"length1":16,"length2":108}]],"length":3419,"saved":false}
{"contributors":[],"silentsave":true,"ts":1359444438610,"patch":[[{"diffs":[[0,"me__ = '"],[-1,"P"],[1,"p"],[0,"ermissio"]],"start1":2430,"start2":2430,"length1":17,"length2":17}]],"length":3419,"saved":false}
