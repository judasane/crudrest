{"ts":1359241535366,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"# -*- coding: utf-8 -*-\nimport os\nfrom sqlalchemy import Column\nfrom sqlalchemy import Integer\nfrom sqlalchemy import String\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nBase = declarative_base()\n\nclass Usuario(Base):\n    \"Inicializa el objeto Usuario con los datos pertinentes\"\n    \n    __tablename__ = 'users'\n\n    id = Column(Integer, primary_key=True)\n    nombre = Column(String(50))\n    apellido = Column(String(50))\n    username = Column(String(50))\n    email = Column(String(150))\n    password = Column(String(32))\n\n    def __init__(self, nombre, apellido, username, email, password):\n                \n        self.nombre = nombre\n        self.apellido = apellido\n        self.username = username\n        self.email = email\n        self.password = password\n    def toDict(self):\n        dic = {}\n        dic[\"id\"] = self.id\n        dic[\"nombre\"] = self.nombre\n        dic[\"apellido\"] = self.apellido\n        dic[\"username\"] = self.username\n        dic[\"email\"] = self.email\n        dic[\"password\"] = self.password\n        return dic\n    #  def __repr__(self):\n\t#\treturn \"ID: %s\\nNombre: %s \\nApellido: %s\\n Username: %s\\nPassword: %s\\nEmail: %s\\n\\n\" % (self.id,self.nombre,self.apellido,self.username,self.password,self.email)\n\n    def update(self, diccionario):\n        \"\"\"\n        Actualiza el usuario a partir de un diccionario de registros de la forma\n        atributo:valor\n        \"\"\"\n        for propiedad, valor in diccionario.iteritems():\n            if propiedad == \"nombre\":\n                self.nombre = valor\n            elif propiedad == \"apellido\":\n                self.apellido = valor\n            elif propiedad == \"username\":\n                self.username = valor\n            elif propiedad == \"email\":\n                self.email = valor\n            elif propiedad == \"password\":\n                self.password = valor\n        return \"exito\"\n\nclass Role(Base):\n    __tablename__ = 'roles'\n\n    id = Column(Integer, primary_key=True)\n    nombre = Column(String(50))\n    descripcion = Column(String)\n\n    def __init__(self, nombre, descripcion):\n        self.nombre = nombre\n        self.descripcion = descripcion\n\n    def toDict(self):\n        dic = {}\n        dic[\"id\"] = self.id\n        dic[\"nombre\"] = self.nombre\n        dic[\"descripcion\"] = self.descripcion\n        return dic\n        \nclass Permission(Base):\n    __tablename__ = 'Permissions'\n\n    id = Column(Integer, primary_key=True)\n    nombre = Column(String(50))\n    descripcion = Column(String)\n\n    def __init__(self, nombre, descripcion):\n        self.nombre = nombre\n        self.descripcion = descripcion\n\n    def toDict(self):\n        dic = {}\n        dic[\"id\"] = self.id\n        dic[\"nombre\"] = self.nombre\n        dic[\"descripcion\"] = self.descripcion\n        return dic\n        \nclass RolesPermissions(Base):\n    __tablename__ = \"roles_permissions\"\n    id_role = Column(Integer, primary_key=True)\n    id_permission = Column(Integer)\n    \n    def __init__(self, id_role, id_permission):\n        self.id_role = id_role\n        self.id_permission = id_permission\n        \nclass UsersRoles(Base):\n    __tablename__ = \"users_roles\"\n    id_user = Column(Integer, primary_key=True)\n    id_role = Column(Integer)\n    \n    def __init__(self, id_user, id_role):\n        self.id_user = id_user\n        self.id_role = id_role\n       \n\n\nclass DatabaseManager:\n    \"\"\"\n    Clase que se encarga de gestionar las comunicaciones con la base de datos.\n    \n    Recibe como parámetros el esquema y el motor.\n    \"\"\"\n    Session = None\n    ses = None\n    \n    def __init__(self, esquema, motor):\n        if motor.lower() == \"mysql\":\n\t\t\tif os.name == \"posix\":\n\t\t\t\tclave = \"noentrar\"\n\t\t\telse:\n\t\t\t\tclave = \"\"\n\t\t\tengine = create_engine(\"mysql://root:\" + clave + \"@127.0.0.1/\" + esquema + \"?charset=utf8\", echo=False)\n        self.Session = sessionmaker(bind=engine)\n        self.ses = self.Session()\n\n    def crearUsuario(self, nombre, apellido, username, email, password, roles):\n\n        usuario = Usuario(nombre, apellido, username, email, password)\n        self.ses.add(usuario)\n        self.ses.commit()\n        if type(roles) == list:\n            for id in roles:\n                relacion = UsersRoles(usuario.id, id)\n                self.ses.add(relacion)\n        else:\n            relacion = UsersRoles(usuario.id, roles)\n            self.ses.add(relacion)\n        self.ses.commit()\n        print type(roles)\n    \n    def crearRol(self, nombre, descripcion, permisos):\n    \n        rol = Role(nombre, descripcion)\n        self.ses.add(rol)\n        self.ses.commit()\n        if type(permisos) == list:\n            for id in permisos:\n                relacion = RolesPermissions(rol.id, id)\n                self.ses.add(relacion)\n        else:\n            relacion = RolesPermissions(rol.id, permisos)\n            self.ses.add(relacion)\n        self.ses.commit()\n    \n    def crearPermiso(self, nombre, descripcion):\n        permiso = Permission(nombre, descripcion)\n        self.ses.add(permiso)\n        self.ses.commit()\n\n\n    def obtenerDatos(self, tabla):\n        \"\"\"\n        Devuelve los datos de una tabla por medio de una lista.\n\n        Recibe como parámetro el nombre de la tabla a la cual acceder.\n\n        Retorna una lista de diccionarios cada uno lleno con conjuntos clave-valor\n        que hacen referencia a los atributos de los objetos dto propios de la\n        consulta\n        \"\"\"\n        lista = []\n        consulta = None\n        if tabla.lower() == \"users\":\n            consulta = self.ses.query(Usuario)\n        elif tabla.lower() == \"permissions\":\n            consulta = self.ses.query(Permission)\n        elif tabla.lower() == \"roles\":\n            consulta = self.ses.query(Role)\n        for instancia in consulta:\n            diccionario = instancia.toDict()\n            lista.append(diccionario)\n        return lista\n\n    def eliminar(self, modulo, id):\n        \"\"\"\n        Elimina un registro de la base de datos.\n\n        Recibe como parámetro el nmbre del módulo del cual se está accediendo.\n\n        Retorna un mesaje con el estado de la transacción.\n        \"\"\"\n        if modulo == \"permisos\":\n            instancia = self.ses.query(Permission).filter_by(id=id).first()\n        elif modulo == \"roles\":\n            instancia = self.ses.query(Role).filter_by(id=id).first()\n        elif modulo == \"usuarios\":\n            instancia = self.ses.query(Usuario).filter_by(id=id).first()\n        retorno = \"El registro %s fué eliminado\" % id\n        try:\n            self.ses.delete(instancia)\n            self.ses.commit()\n        except Exception, e:\n            retorno = \"Ha ocurrido un error al intentar eliminar:\", e\n        return retorno\n\n    def update(self, id,diccionario):\n        instancia = None\n        modulo = \"usuarios\"\n        if modulo == \"permisos\":\n            instancia = self.ses.query(Permission).filter_by(id=id).first()\n        elif modulo == \"roles\":\n            instancia = self.ses.query(Role).filter_by(id=id).first()\n        elif modulo == \"usuarios\":\n            instancia = self.ses.query(Usuario).filter_by(id=id).first()\n        retorno = \"El registro %s fué actualizado\" % id\n        instancia.update(diccionario)\n        self.ses.add(instancia)\n        self.ses.commit()\n#        except Exception, e:\n#            retorno = \"Ha ocurrido un error al intentar eliminar:\", e\n        return retorno\n       \n\nif __name__ == \"__main__\":\n    dbmm = DatabaseManager(\"WeBD\", \"MySql\")\n    print dbmm.update(82,{\"email\":\"jochepe@gmail.com\",\"apellido\":\"cambiado\"})\n    "]],"start1":0,"start2":0,"length1":0,"length2":7584}]],"length":7584}
{"contributors":[],"silentsave":true,"ts":1359242008659,"patch":[[{"diffs":[[0,"l://"],[-1,"root"],[1,"sibismark"],[0,":\" +"]],"start1":3800,"start2":3800,"length1":12,"length2":17}]],"length":7589,"saved":false}
{"ts":1359242014825,"patch":[[{"diffs":[[0,"+ \"@"],[-1,"127.0.0.1"],[1,"sibismark.db.10388322.hostedresource.com"],[0,"/\" +"]],"start1":3824,"start2":3824,"length1":17,"length2":48}]],"length":7620,"saved":false}
{"ts":1359242028383,"patch":[[{"diffs":[[0,"lave = \""],[1,"P"],[0,"\"\n\t\t\teng"]],"start1":3759,"start2":3759,"length1":16,"length2":17}]],"length":7621,"saved":false}
{"ts":1359242030138,"patch":[[{"diffs":[[0,"ave = \"P"],[1,"ruebas201"],[0,"\"\n\t\t\teng"]],"start1":3760,"start2":3760,"length1":16,"length2":25}]],"length":7630,"saved":false}
{"ts":1359242031710,"patch":[[{"diffs":[[0,"uebas201"],[1,"3!"],[0,"\"\n\t\t\teng"]],"start1":3769,"start2":3769,"length1":16,"length2":18}]],"length":7632,"saved":false}
{"ts":1359242042012,"patch":[[{"diffs":[[0,"self"],[-1,", esquema, motor"],[0,"):\n "]],"start1":3636,"start2":3636,"length1":24,"length2":8}]],"length":7616,"saved":false}
{"ts":1359242074097,"patch":[[{"diffs":[[0,"f):\n"],[-1,"        if motor.lower() == \"mysql\":\n\t\t\tif os.name == \"posix\":\n\t\t\t\tclave = \"noentrar\"\n\t\t\telse:\n"],[0,"\t\t\t\t"]],"start1":3639,"start2":3639,"length1":103,"length2":8}]],"length":7521,"saved":false}
{"ts":1359242076637,"patch":[[{"diffs":[[0,"lf):\n\t\t\t"],[-1,"\t"],[0,"clave = "]],"start1":3638,"start2":3638,"length1":17,"length2":16}]],"length":7520,"saved":false}
{"ts":1359242081775,"patch":[[{"diffs":[[0,"\n\t\t\t"],[-1,"clave = \"Pruebas2013!\"\n\t\t\ten"],[0,"gine"]],"start1":3642,"start2":3642,"length1":36,"length2":8}]],"length":7492,"saved":false}
{"ts":1359242083038,"patch":[[{"diffs":[[0,"lf):\n\t\t\t"],[1,"clave = \"Pruebas2013!\"\n\t\t\ten"],[0,"gine = c"]],"start1":3638,"start2":3638,"length1":16,"length2":44}]],"length":7520,"saved":false}
{"ts":1359242086315,"patch":[[{"diffs":[[0,"elf):\n\t\t"],[-1,"\t"],[0,"clave = "]],"start1":3637,"start2":3637,"length1":17,"length2":16},{"diffs":[[0,"s2013!\"\n"],[-1,"\t"],[0,"\t\tengine"]],"start1":3660,"start2":3660,"length1":17,"length2":16}]],"length":7518,"saved":false}
{"ts":1359242103003,"patch":[[{"diffs":[[0,"com/\" + "],[-1,"esquema"],[0," + \"?cha"]],"start1":3763,"start2":3763,"length1":23,"length2":16}]],"length":7511,"saved":false}
{"ts":1359242104128,"patch":[[{"diffs":[[0,"ce.com/\""],[-1," +"],[0,"  + \"?ch"]],"start1":3760,"start2":3760,"length1":18,"length2":16}]],"length":7509,"saved":false}
{"ts":1359242107931,"patch":[[{"diffs":[[0,"rce.com/"],[1,"sibismark"],[0,"\"  + \"?c"]],"start1":3759,"start2":3759,"length1":16,"length2":25}]],"length":7518,"saved":false}
{"ts":1359242316092,"patch":[[{"diffs":[[0,"om/sibis"],[-1,"mark"],[0,"\"  + \"?c"]],"start1":3764,"start2":3764,"length1":20,"length2":16}]],"length":7514,"saved":false}
{"ts":1359242320431,"patch":[[{"diffs":[[0,"(self):\n"],[1,"        if motor.lower() == \"mysql\":\n\t\t\tif os.name == \"posix\":\n\t\t\t\tclave = \"noentrar\"\n\t\t\telse:\n\t\t"],[0,"\t\tclave "]],"start1":3635,"start2":3635,"length1":16,"length2":113},{"diffs":[[0,"s2013!\"\n"],[1,"\t"],[0,"\t\tengine"]],"start1":3757,"start2":3757,"length1":16,"length2":17},{"diffs":[[0,"com/"],[-1,"sibis\" "],[1,"\" + esquema"],[0," + \""]],"start1":3861,"start2":3861,"length1":15,"length2":19}]],"length":7616,"saved":false}
{"ts":1359242322813,"patch":[[{"diffs":[[0,"_init__(self"],[1,", r"],[0,"):\n        i"]],"start1":3628,"start2":3628,"length1":24,"length2":27}]],"length":7619,"saved":false}
{"ts":1359242324739,"patch":[[{"diffs":[[0,"_(self, "],[1,"oto"],[0,"r):\n    "]],"start1":3634,"start2":3634,"length1":16,"length2":19}]],"length":7622,"saved":false}
{"ts":1359242349569,"patch":[[{"diffs":[[0,"    "],[-1,"if motor.lower() == \"mysql\":\n\t\t\tif os.name == \"posix\":\n\t\t\t\tclave = \"noentrar\"\n\t\t\telse:\n"],[0,"\t\t\t\t"]],"start1":3653,"start2":3653,"length1":95,"length2":8}]],"length":7535,"saved":false}
{"ts":1359242350510,"patch":[[{"diffs":[[0,"       \t"],[-1,"\t\t\t"],[0,"clave = "]],"start1":3650,"start2":3650,"length1":19,"length2":16}]],"length":7532,"saved":false}
{"ts":1359242351846,"patch":[[{"diffs":[[0,"        "],[-1,"\t"],[0,"clave = "]],"start1":3649,"start2":3649,"length1":17,"length2":16}]],"length":7531,"saved":false}
{"ts":1359242353528,"patch":[[{"diffs":[[0,"013!\"\n\t\t"],[-1,"\t"],[0,"engine ="]],"start1":3674,"start2":3674,"length1":17,"length2":16}]],"length":7530,"saved":false}
{"ts":1359242381098,"patch":[[{"diffs":[[0,"    "],[-1,"clave = \"Pruebas2013!\"\n\t\t"],[0,"engi"]],"start1":3653,"start2":3653,"length1":33,"length2":8}]],"length":7505,"saved":false}
{"ts":1359242382228,"patch":[[{"diffs":[[0,"        "],[1,"clave = \"Pruebas2013!\"\n\t\t"],[0,"engine ="]],"start1":3649,"start2":3649,"length1":16,"length2":41}]],"length":7530,"saved":false}
{"ts":1359242388738,"patch":[[{"diffs":[[0," otor):\n"],[-1,"        "],[0,"clave = "]],"start1":3641,"start2":3641,"length1":24,"length2":16},{"diffs":[[0,"3!\"\n"],[-1,"\t\t"],[0,"engi"]],"start1":3668,"start2":3668,"length1":10,"length2":8}]],"length":7520,"saved":false}
{"ts":1359242391454,"patch":[[{"diffs":[[0," otor):\n"],[1,"    "],[0,"clave = "]],"start1":3641,"start2":3641,"length1":16,"length2":20}]],"length":7524,"saved":false}
{"ts":1359242395066,"patch":[[{"diffs":[[0," otor):\n"],[1,"    "],[0,"    clav"]],"start1":3641,"start2":3641,"length1":16,"length2":20}]],"length":7528,"saved":false}
{"ts":1359242398555,"patch":[[{"diffs":[[0,"s2013!\"\n"],[1,"        "],[0,"engine ="]],"start1":3672,"start2":3672,"length1":16,"length2":24}]],"length":7536,"saved":false}
{"ts":1359242405586,"patch":[[{"diffs":[[0," otor):\n"],[-1,"        "],[0,"clave = "]],"start1":3641,"start2":3641,"length1":24,"length2":16},{"diffs":[[0,"s2013!\"\n"],[-1,"        "],[0,"engine ="]],"start1":3664,"start2":3664,"length1":24,"length2":16},{"diffs":[[0,"=False)\n"],[-1,"        "],[0,"self.Ses"]],"start1":3804,"start2":3804,"length1":24,"length2":16},{"diffs":[[0,"engine)\n"],[-1,"        "],[0,"self.ses"]],"start1":3845,"start2":3845,"length1":24,"length2":16}]],"length":7504,"saved":false}
{"ts":1359242406818,"patch":[[{"diffs":[[0," otor):\n"],[1,"        "],[0,"clave = "]],"start1":3641,"start2":3641,"length1":16,"length2":24},{"diffs":[[0,"s2013!\"\n"],[1,"        "],[0,"engine ="]],"start1":3672,"start2":3672,"length1":16,"length2":24},{"diffs":[[0,"=False)\n"],[1,"        "],[0,"self.Ses"]],"start1":3820,"start2":3820,"length1":16,"length2":24},{"diffs":[[0,"engine)\n"],[1,"        "],[0,"self.ses"]],"start1":3869,"start2":3869,"length1":16,"length2":24}]],"length":7536,"saved":false}
{"ts":1359242419064,"patch":[[{"diffs":[[0,"rce.com/"],[1,"sibismark"],[0,"\" + esqu"]],"start1":3777,"start2":3777,"length1":16,"length2":25}]],"length":7545,"saved":false}
{"ts":1359242422254,"patch":[[{"diffs":[[0,"k\" +"],[-1," esquema +"],[0," \"?c"]],"start1":3793,"start2":3793,"length1":18,"length2":8}]],"length":7535,"saved":false}
{"ts":1359242457737,"patch":[[{"diffs":[[0,"elf,"],[-1," otor"],[0,"):\n "]],"start1":3637,"start2":3637,"length1":13,"length2":8}]],"length":7530,"saved":false}
{"ts":1359242459024,"patch":[[{"diffs":[[0,"t__(self"],[-1,","],[0,"):\n     "]],"start1":3632,"start2":3632,"length1":17,"length2":16}]],"length":7529,"saved":false}
{"ts":1359242483506,"patch":[[{"diffs":[[0,"ger("],[-1,"\"WeBD\", \"MySql\""],[0,")\n  "]],"start1":7426,"start2":7426,"length1":23,"length2":8}]],"length":7514,"saved":false}
{"contributors":[],"silentsave":true,"ts":1359243164773,"patch":[[{"diffs":[[0," Usuario(Bas"],[1,",  "],[0,"e):\n    \"Ini"]],"start1":291,"start2":291,"length1":24,"length2":27}]],"length":7517,"saved":false}
{"contributors":[],"silentsave":true,"ts":1359243301435,"patch":[[{"diffs":[[0,"_base()\n"],[1,"#"],[0,"\nclass U"]],"start1":277,"start2":277,"length1":16,"length2":17}]],"length":7518,"saved":false}
{"ts":1359243303808,"patch":[[{"diffs":[[0,"base()\n#"],[1,"qUe"],[0,"\nclass U"]],"start1":278,"start2":278,"length1":16,"length2":19}]],"length":7521,"saved":false}
{"ts":1359243309516,"patch":[[{"diffs":[[0,"e()\n#qUe"],[1," M"],[0,"\nclass U"]],"start1":281,"start2":281,"length1":16,"length2":18}]],"length":7523,"saved":false}
{"ts":1359243310632,"patch":[[{"diffs":[[0,")\n#qUe M"],[1,"a"],[0,"\nclass U"]],"start1":283,"start2":283,"length1":16,"length2":17}]],"length":7524,"saved":false}
{"ts":1359243312383,"patch":[[{"diffs":[[0,"\n#qUe Ma"],[1,"S"],[0,"\nclass U"]],"start1":284,"start2":284,"length1":16,"length2":17}]],"length":7525,"saved":false}
{"ts":1359243316056,"patch":[[{"diffs":[[0,"#qUe MaS"],[1,"?"],[0,"\nclass U"]],"start1":285,"start2":285,"length1":16,"length2":17}]],"length":7526,"saved":false}
{"ts":1359243318446,"patch":[[{"diffs":[[0,"Ue MaS?\n"],[1,"\n"],[0,"class Us"]],"start1":287,"start2":287,"length1":16,"length2":17}]],"length":7527,"saved":false}
{"ts":1359243330458,"patch":[[{"diffs":[[0,"e MaS?\n\n"],[1,"\n"],[0,"class Us"]],"start1":288,"start2":288,"length1":16,"length2":17}]],"length":7528,"saved":false}
{"ts":1359243347134,"patch":[[{"diffs":[[0,"qUe MaS?"],[1,"HhhhhHhhhhgGg"],[0,"\n\n\nclass"]],"start1":286,"start2":286,"length1":16,"length2":29}]],"length":7541,"saved":false}
{"ts":1359243362233,"patch":[[{"diffs":[[0,"HhhhhgGg"],[1," "],[0,"\n\n\nclass"]],"start1":299,"start2":299,"length1":16,"length2":17}]],"length":7542,"saved":false}
{"contributors":[],"silentsave":false,"ts":1359243515072,"patch":[[{"diffs":[[0,"e()\n"],[-1,"#qUe MaS?HhhhhHhhhhgGg \n\n\n"],[0,"clas"]],"start1":281,"start2":281,"length1":34,"length2":8},{"diffs":[[0,"(Bas"],[-1,",  "],[0,"e):\n"]],"start1":298,"start2":298,"length1":11,"length2":8}]],"length":7513,"saved":false}
{"contributors":[],"silentsave":true,"ts":1359324482867,"patch":[[{"diffs":[[0,"ionmaker"],[1,"\nimpor"],[0,"\n\nBase ="]],"start1":249,"start2":249,"length1":16,"length2":22}]],"length":7519,"saved":false}
{"ts":1359324483915,"patch":[[{"diffs":[[0,"er\nimpor"],[1,"t json"],[0,"\n\nBase ="]],"start1":255,"start2":255,"length1":16,"length2":22}]],"length":7525,"saved":false}
{"ts":1359324501888,"patch":[[{"diffs":[[0," dbm"],[-1,"m.update(82,{\"email\":\"jochepe@gmail.com\",\"apellido\":\"cambiado\"})"],[1,"."],[0,"\n   "]],"start1":7452,"start2":7452,"length1":72,"length2":9}]],"length":7462,"saved":false}
{"ts":1359324505095,"patch":[[{"diffs":[[0,"int "],[-1,"dbm."],[1,"json"],[0,"\n   "]],"start1":7449,"start2":7449,"length1":12,"length2":12}]],"length":7462,"saved":false}
{"ts":1359324508192,"patch":[[{"diffs":[[0,"int json"],[1,".d"],[0,"\n    "]],"start1":7449,"start2":7449,"length1":13,"length2":15}]],"length":7464,"saved":false}
{"ts":1359324510926,"patch":[[{"diffs":[[0,"t json.d"],[1,"u"],[0,"\n    "]],"start1":7451,"start2":7451,"length1":13,"length2":14}]],"length":7465,"saved":false}
{"ts":1359324512766,"patch":[[{"diffs":[[0," json.du"],[1,"mp("],[0,"\n    "]],"start1":7452,"start2":7452,"length1":13,"length2":16}]],"length":7468,"saved":false}
{"ts":1359324521277,"patch":[[{"diffs":[[0,"on.dump("],[1,"dbmm.o"],[0,"\n    "]],"start1":7455,"start2":7455,"length1":13,"length2":19}]],"length":7474,"saved":false}
{"ts":1359324561053,"patch":[[{"diffs":[[0,"p(dbmm.o"],[1,"btenerDatos("],[0,"\n    "]],"start1":7461,"start2":7461,"length1":13,"length2":25}]],"length":7486,"saved":false}
{"ts":1359324572960,"patch":[[{"diffs":[[0,"erDatos("],[1,"\"users\"))"],[0,"\n    "]],"start1":7473,"start2":7473,"length1":13,"length2":22}]],"length":7495,"saved":false}
{"contributors":[],"silentsave":true,"ts":1359327393685,"patch":[[{"diffs":[[0,"on\n\n"],[-1,"Base = declarative_base()\nclass Usuario(Base):\n    \"Inicializa el objeto Usuario con los datos pertinentes\"\n    \n    __tablename__ = 'users'\n\n    id = Column(Integer, primary_key=True)\n    nombre = Column(String(50))\n    apellido = Column(String(50))\n    username = Column(String(50))\n    email = Column(String(150))\n    password = Column(String(32))\n\n    def __init__(self, nombre, apellido, username, email, password):\n                \n        self.nombre = nombre\n        self.apellido = apellido\n        self.username = username\n        self.email = email\n        self.password = password\n    def toDict(self):\n        dic = {}\n        dic[\"id\"] = self.id\n        dic[\"nombre\"] = self.nombre\n        dic[\"apellido\"] = self.apellido\n        dic[\"username\"] = self.username\n        dic[\"email\"] = self.email\n        dic[\"password\"] = self.password\n        return dic\n    #  def __repr__(self):\n\t#\treturn \"ID: %s\\nNombre: %s \\nApellido: %s\\n Username: %s\\nPassword: %s\\nEmail: %s\\n\\n\" % (self.id,self.nombre,self.apellido,self.username,self.password,self.email)\n\n    def update(self, diccionario):\n        \"\"\"\n        Actualiza el usuario a partir de un diccionario de registros de la forma\n        atributo:valor\n        \"\"\"\n        for propiedad, valor in diccionario.iteritems():\n            if propiedad == \"nombre\":\n                self.nombre = valor\n            elif propiedad == \"apellido\":\n                self.apellido = valor\n            elif propiedad == \"username\":\n                self.username = valor\n            elif propiedad == \"email\":\n                self.email = valor\n            elif propiedad == \"password\":\n                self.password = valor\n        return \"exito\"\n\nclass Role(Base):\n    __tablename__ = 'roles'\n\n    id = Column(Integer, primary_key=True)\n    nombre = Column(String(50))\n    descripcion = Column(String)\n\n    def __init__(self, nombre, descripcion):\n        self.nombre = nombre\n        self.descripcion = descripcion\n\n    def toDict(self):\n        dic = {}\n        dic[\"id\"] = self.id\n        dic[\"nombre\"] = self.nombre\n        dic[\"descripcion\"] = self.descripcion\n        return dic\n        \nclass Permission(Base):\n    __tablename__ = 'Permissions'\n\n    id = Column(Integer, primary_key=True)\n    nombre = Column(String(50))\n    descripcion = Column(String)\n\n    def __init__(self, nombre, descripcion):\n        self.nombre = nombre\n        self.descripcion = descripcion\n\n    def toDict(self):\n        dic = {}\n        dic[\"id\"] = self.id\n        dic[\"nombre\"] = self.nombre\n        dic[\"descripcion\"] = self.descripcion\n        return dic\n        \nclass RolesPermissions(Base):\n    __tablename__ = \"roles_permissions\"\n    id_role = Column(Integer, primary_key=True)\n    id_permission = Column(Integer)\n    \n    def __init__(self, id_role, id_permission):\n        self.id_role = id_role\n        self.id_permission = id_permission\n        \nclass UsersRoles(Base):\n    __tablename__ = \"users_roles\"\n    id_user = Column(Integer, primary_key=True)\n    id_role = Column(Integer)\n    \n    def __init__(self, id_user, id_role):\n        self.id_user = id_user\n        self.id_role = id_role"],[0,"\n   "]],"start1":267,"start2":267,"length1":3144,"length2":8}]],"length":4359,"saved":false}
{"ts":1359327422802,"patch":[[{"diffs":[[0,"ine\n"],[-1,"from sqlalchemy.ext.declarative import declarative_base"],[0,"\nfro"]],"start1":158,"start2":158,"length1":63,"length2":8}]],"length":4304,"saved":false}
{"ts":1359327468610,"patch":[[{"diffs":[[0,"-*-\n"],[-1,"import os\n"],[0,"from"]],"start1":20,"start2":20,"length1":18,"length2":8}]],"length":4294,"saved":false}
{"ts":1359327482087,"patch":[[{"diffs":[[0,"-*-\n"],[-1,"from sqlalchemy import Column\nfrom sqlalchemy import Integer\nfrom sqlalchemy import String"],[0,"\nfro"]],"start1":20,"start2":20,"length1":98,"length2":8}]],"length":4204,"saved":false}
{"ts":1359327532524,"patch":[[{"diffs":[[0,"_engine\n"],[-1,"\n"],[0,"from sql"]],"start1":54,"start2":54,"length1":17,"length2":16}]],"length":4203,"saved":false}
{"ts":1359327539169,"patch":[[{"diffs":[[0,"n\n\n\n"],[-1,"       \n\n\n"],[0,"clas"]],"start1":112,"start2":112,"length1":18,"length2":8}]],"length":4193,"saved":false}
{"ts":1359327604286,"patch":[[{"diffs":[[0,"rt json\n"],[1,"from "],[0,"\n\nclass "]],"start1":106,"start2":106,"length1":16,"length2":21}]],"length":4198,"saved":false}
{"ts":1359327609545,"patch":[[{"diffs":[[0,"on\nfrom "],[1,"dtos impor"],[0,"\n\nclass "]],"start1":111,"start2":111,"length1":16,"length2":26}]],"length":4208,"saved":false}
{"ts":1359327610907,"patch":[[{"diffs":[[0,"os impor"],[1,"t "],[0,"\n\nclass "]],"start1":121,"start2":121,"length1":16,"length2":18}]],"length":4210,"saved":false}
{"ts":1359327648612,"patch":[[{"diffs":[[0," import "],[1,"Usuario"],[0,"\n\nclass "]],"start1":123,"start2":123,"length1":16,"length2":23}]],"length":4217,"saved":false}
{"ts":1359327649436,"patch":[[{"diffs":[[0," Usuario"],[1,",R"],[0,"\n\nclass "]],"start1":130,"start2":130,"length1":16,"length2":18}]],"length":4219,"saved":false}
{"ts":1359327651182,"patch":[[{"diffs":[[0,"suario,R"],[1,"ole,P"],[0,"\n\nclass "]],"start1":132,"start2":132,"length1":16,"length2":21}]],"length":4224,"saved":false}
{"ts":1359327655248,"patch":[[{"diffs":[[0,"o,Role,P"],[1,"ermission,"],[0,"\n\nclass "]],"start1":137,"start2":137,"length1":16,"length2":26}]],"length":4234,"saved":false}
{"ts":1359327665353,"patch":[[{"diffs":[[0,"ission,\n"],[-1,"\n"],[0,"class Da"]],"start1":148,"start2":148,"length1":17,"length2":16}]],"length":4233,"saved":false}
{"ts":1359327670036,"patch":[[{"diffs":[[0,"mission,"],[1,"RolesPermissions,"],[0,"\nclass D"]],"start1":147,"start2":147,"length1":16,"length2":33}]],"length":4250,"saved":false}
{"ts":1359327672013,"patch":[[{"diffs":[[0,"issions,"],[1," U"],[0,"\nclass D"]],"start1":164,"start2":164,"length1":16,"length2":18}]],"length":4252,"saved":false}
{"ts":1359327675240,"patch":[[{"diffs":[[0,"sions, U"],[1,"sersRoles\n"],[0,"\nclass D"]],"start1":166,"start2":166,"length1":16,"length2":26}]],"length":4262,"saved":false}
{"ts":1359327976258,"patch":[[{"diffs":[[0,"    "],[-1,"def obtenerDatos(self, tabla):\n        \"\"\"\n        Devuelve los datos de una tabla por medio de una lista.\n\n        Recibe como parámetro el nombre de la tabla a la cual acceder.\n\n        Retorna una lista de diccionarios cada uno lleno con conjuntos clave-valor\n        que hacen referencia a los atributos de los objetos dto propios de la\n        consulta\n        \"\"\"\n        lista = []\n        consulta = None\n        if tabla.lower() == \"users\":\n            consulta = self.ses.query(Usuario)\n        elif tabla.lower() == \"permissions\":\n            consulta = self.ses.query(Permission)\n        elif tabla.lower() == \"roles\":\n            consulta = self.ses.query(Role)\n        for instancia in consulta:\n            diccionario = instancia.toDict()\n            lista.append(diccionario)\n        return lista"],[0,"\n\n  "]],"start1":1813,"start2":1813,"length1":821,"length2":8}]],"length":3449,"saved":false}
{"ts":1359327979595,"patch":[[{"diffs":[[0,"ession()"],[1,"\n        \n        "],[0,"\n\n    de"]],"start1":673,"start2":673,"length1":16,"length2":34}]],"length":3467,"saved":false}
{"ts":1359327983010,"patch":[[{"diffs":[[0,"   \n    "],[-1,"    "],[1,"def obtenerDatos(self, tabla):\n        \"\"\"\n        Devuelve los datos de una tabla por medio de una lista.\n\n        Recibe como parámetro el nombre de la tabla a la cual acceder.\n\n        Retorna una lista de diccionarios cada uno lleno con conjuntos clave-valor\n        que hacen referencia a los atributos de los objetos dto propios de la\n        consulta\n        \"\"\"\n        lista = []\n        consulta = None\n        if tabla.lower() == \"users\":\n            consulta = self.ses.query(Usuario)\n        elif tabla.lower() == \"permissions\":\n            consulta = self.ses.query(Permission)\n        elif tabla.lower() == \"roles\":\n            consulta = self.ses.query(Role)\n        for instancia in consulta:\n            diccionario = instancia.toDict()\n            lista.append(diccionario)\n        return lista"],[0,"\n\n    de"]],"start1":687,"start2":687,"length1":20,"length2":829}]],"length":4276,"saved":false}
